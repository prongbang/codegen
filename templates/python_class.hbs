"""
{{ StructName }} - Generated Python Dataclass

This file was automatically generated from the '{{ TableName }}' database table.
Do not edit this file manually - regenerate it using the codegen tool.

Table: {{ TableName }}
Generated: Auto-generated
Generator: CodeGen v0.1.0
"""

{{#if Imports}}
{{#each Imports}}
from {{this}} import *
{{/each}}

{{/if}}
from dataclasses import dataclass, field
from typing import Optional, Dict, Any
import datetime
import json


@dataclass
class {{ StructName }}:
    """
    {{ StructName }} represents a row from the '{{ TableName }}' table.
    
    This dataclass is automatically generated from the database schema and includes
    all columns with appropriate Python types and optional/nullable handling.
    
    Attributes:
{{#each Columns}}
        {{ FieldName }} ({{ LangType }}): {{#if ColumnComment}}{{ ColumnComment }}{{else}}Database column '{{ OriginalColumnName }}'{{/if}}{{#if IsNullable}} (nullable){{/if}}{{#if DefaultValue}} (default: {{ DefaultValue }}){{/if}}
{{/each}}
    """
    
{{#each Columns}}
    {{#if LangTags}}
    {{{ LangTags }}}
    {{/if}}
    {{#if ColumnComment}}
    # {{ ColumnComment }}
    # Database column: {{ OriginalColumnName }}
    # Type: {{ LangType }}{{#if IsNullable}} (nullable){{/if}}{{#if DefaultValue}}
    # Default: {{ DefaultValue }}{{/if}}
    {{else}}
    # Database column: {{ OriginalColumnName }}
    # Type: {{ LangType }}{{#if IsNullable}} (nullable){{/if}}{{#if DefaultValue}}
    # Default: {{ DefaultValue }}{{/if}}
    {{/if}}
    {{ FieldName }}: {{ LangType }}{{#if IsNullable}} = None{{/if}}
{{/each}}

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> '{{ StructName }}':
        """
        Create {{ StructName }} instance from dictionary.
        
        Args:
            data: Dictionary containing the field values
            
        Returns:
            {{ StructName }}: New instance with values from dictionary
        """
        return cls(
{{#each Columns}}
            {{ FieldName }}=data.get('{{ OriginalColumnName }}'),
{{/each}}
        )

    def to_dict(self) -> Dict[str, Any]:
        """
        Convert {{ StructName }} instance to dictionary.
        
        Returns:
            Dict[str, Any]: Dictionary representation of the instance
        """
        return {
{{#each Columns}}
            '{{ OriginalColumnName }}': self.{{ FieldName }},
{{/each}}
        }

    @classmethod
    def from_json(cls, json_str: str) -> '{{ StructName }}':
        """
        Create {{ StructName }} instance from JSON string.
        
        Args:
            json_str: JSON string representation
            
        Returns:
            {{ StructName }}: New instance parsed from JSON
        """
        data = json.loads(json_str)
        return cls.from_dict(data)

    def to_json(self) -> str:
        """
        Convert {{ StructName }} instance to JSON string.
        
        Returns:
            str: JSON string representation
        """
        return json.dumps(self.to_dict(), default=str)