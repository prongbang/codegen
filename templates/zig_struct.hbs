//! {{ StructName }} - Generated Zig Struct
//!
//! This file was automatically generated from the '{{ TableName }}' database table.
//! Do not edit this file manually - regenerate it using the codegen tool.
//!
//! Table: {{ TableName }}
//! Generated: Auto-generated
//! Generator: CodeGen v0.1.0

const std = @import("std");
{{#if Imports}}
{{#each Imports}}
const {{this}} = @import("{{this}}");
{{/each}}

{{/if}}

/// {{ StructName }} represents a row from the '{{ TableName }}' table.
///
/// This struct is automatically generated from the database schema and includes
/// all columns with appropriate Zig types and optional/nullable handling.
pub const {{ StructName }} = struct {
{{#each Columns}}
    {{#if ColumnComment}}
    /// {{ ColumnComment }}
    ///
    /// Database column: {{ OriginalColumnName }}
    /// Type: {{ LangType }}{{#if IsNullable}} (nullable){{/if}}
    {{else}}
    /// Database column: {{ OriginalColumnName }}
    /// Type: {{ LangType }}{{#if IsNullable}} (nullable){{/if}}
    {{/if}}
    {{ FieldName }}: {{ LangType }},
{{/each}}

    const Self = @This();

    /// Initialize {{ StructName }} with default values
    pub fn init() Self {
        return Self{
{{#each Columns}}
            .{{ FieldName }} = {{#if IsNullable}}null{{else}}undefined{{/if}},
{{/each}}
        };
    }

    /// Initialize {{ StructName }} from values
    pub fn initWith(
{{#each Columns}}
        {{ FieldName }}: {{ LangType }}{{#unless @last}},{{/unless}}{{#if ColumnComment}} // {{ ColumnComment }}{{/if}}
{{/each}}
    ) Self {
        return Self{
{{#each Columns}}
            .{{ FieldName }} = {{ FieldName }},
{{/each}}
        };
    }

    /// Convert {{ StructName }} to JSON string
    pub fn toJson(self: Self, allocator: std.mem.Allocator) ![]u8 {
        return std.json.stringifyAlloc(allocator, self, .{});
    }

    /// Parse {{ StructName }} from JSON string
    pub fn fromJson(allocator: std.mem.Allocator, json_str: []const u8) !Self {
        return std.json.parseFromSlice(Self, allocator, json_str, .{});
    }

    /// Print {{ StructName }} for debugging
    pub fn print(self: Self) void {
        std.debug.print("{{ StructName }}{\n");
{{#each Columns}}
        std.debug.print("  {{ FieldName }}: {any}\n", .{self.{{ FieldName }}});
{{/each}}
        std.debug.print("}\n");
    }
};
