//! {{ StructName }} - Generated Rust struct
//! 
//! This file was automatically generated from the '{{ TableName }}' database table.
//! Do not edit this file manually - regenerate it using the codegen tool.
//!
//! Table: {{ TableName }}
//! Generated: Auto-generated
//! Generator: CodeGen v0.1.0

{{#if Imports}}
{{#each Imports}}
use {{this}};
{{/each}}

{{/if}}
/// {{ StructName }} represents a row from the '{{ TableName }}' table
///
/// This struct is automatically generated from the database schema and includes
/// all columns with appropriate Rust types and serialization support.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct {{ StructName }} {
{{#each Columns}}
    {{#if LangTags}}
    {{{ LangTags }}}
    {{/if}}
    {{#if ColumnComment}}
    /// {{ ColumnComment }}
    /// 
    /// Database column: {{ OriginalColumnName }}
    /// Type: {{ LangType }}{{#if IsNullable}} (nullable){{/if}}{{#if DefaultValue}}
    /// Default: {{ DefaultValue }}{{/if}}
    {{else}}
    /// Database column: {{ OriginalColumnName }}
    /// Type: {{ LangType }}{{#if IsNullable}} (nullable){{/if}}{{#if DefaultValue}}
    /// Default: {{ DefaultValue }}{{/if}}
    {{/if}}
    pub {{ FieldName }}: {{ LangType }},
{{/each}}
}

impl {{ StructName }} {
    /// Creates a new {{ StructName }} instance
    pub fn new(
{{#each Columns}}
        {{ FieldName }}: {{ LangType }},
{{/each}}
    ) -> Self {
        Self {
{{#each Columns}}
            {{ FieldName }},
{{/each}}
        }
    }
}
