/*
 * {{ StructName }} - Generated Java Class
 * 
 * This file was automatically generated from the '{{ TableName }}' database table.
 * Do not edit this file manually - regenerate it using the codegen tool.
 *
 * Table: {{ TableName }}
 * Generated: Auto-generated
 * Generator: CodeGen v0.1.0
 */
package com.yourcompany.models;

{{#if Imports}}
{{#each Imports}}
import {{this}};
{{/each}}

{{/if}}
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * {{ StructName }} represents a row from the '{{ TableName }}' table.
 * 
 * This class is automatically generated from the database schema and includes
 * all columns with appropriate Java types and JSON serialization support.
 * 
 * @author CodeGen v0.1.0
 * @version 1.0
 * @since 1.0
 */
public class {{ StructName }} implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

{{#each Columns}}
    {{#if ColumnComment}}
    /**
     * {{ ColumnComment }}
     * <p>
     * Database column: {{ OriginalColumnName }}<br>
     * Type: {{ LangType }}{{#if IsNullable}}<br>
     * Nullable: true{{/if}}
     */
    {{else}}
    /**
     * Database column: {{ OriginalColumnName }}
     * <p>
     * Type: {{ LangType }}{{#if IsNullable}}<br>
     * Nullable: true{{/if}}
     */
    {{/if}}
    {{#if LangTags}}
    {{{ LangTags }}}
    {{/if}}
    @JsonProperty("{{ OriginalColumnName }}")
    private {{ LangType }} {{ FieldName }};

{{/each}}
    /**
     * Default constructor
     */
    public {{ StructName }}() {}

    /**
     * Constructor with all fields
     */
    public {{ StructName }}(
{{#each Columns}}
        {{ LangType }} {{ FieldName }}{{#unless @last}},{{/unless}}{{#if ColumnComment}} // {{ ColumnComment }}{{/if}}
{{/each}}
    ) {
{{#each Columns}}
        this.{{ FieldName }} = {{ FieldName }};
{{/each}}
    }

{{#each Columns}}
    public {{ LangType }} get{{ capitalize FieldName }}() {
        return this.{{ FieldName }};
    }

    public void set{{ capitalize FieldName }}({{ LangType }} {{ FieldName }}) {
        this.{{ FieldName }} = {{ FieldName }};
    }

{{/each}}
    /**
     * Create {{ StructName }} from Map
     */
    public static {{ StructName }} fromMap(Map<String, Object> data) {
        {{ StructName }} instance = new {{ StructName }}();
{{#each Columns}}
        if (data.containsKey("{{ OriginalColumnName }}")) {
            instance.set{{ capitalize FieldName }}(({{ LangType }}) data.get("{{ OriginalColumnName }}"));
        }
{{/each}}
        return instance;
    }

    /**
     * Convert {{ StructName }} to Map
     */
    public Map<String, Object> toMap() {
        Map<String, Object> map = new HashMap<>();
{{#each Columns}}
        map.put("{{ OriginalColumnName }}", this.{{ FieldName }});
{{/each}}
        return map;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        {{ StructName }} that = ({{ StructName }}) o;
        return {{#each Columns}}Objects.equals({{ FieldName }}, that.{{ FieldName }}){{#unless @last}} &&
               {{/unless}}{{/each}};
    }

    @Override
    public int hashCode() {
        return Objects.hash({{#each Columns}}{{ FieldName }}{{#unless @last}}, {{/unless}}{{/each}});
    }

    @Override
    public String toString() {
        return "{{ StructName }}{" +
{{#each Columns}}
                "{{ FieldName }}=" + {{ FieldName }} +{{#unless @last}}
                ", " +{{/unless}}
{{/each}}
                '}';
    }
}
